{
  "version": 3,
  "sources": ["src/app/service/order.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { CartItem } from './cart.service';\r\n\r\nexport interface Order {\r\n  id: number;\r\n  customerName: string;\r\n  date: string;\r\n  status:  'IN_PROCESS' | 'SENT' | 'CANCELLED';\r\n  orderItems?: OrderItem[];\r\n  address?: string;\r\n}\r\n\r\nexport interface OrderItem {\r\n  id: number;\r\n  productName: string;\r\n  quantity: number;\r\n  price: number;\r\n  product?: {\r\n    id: number;\r\n    name: string;\r\n    price: number;\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n  private baseUrl = 'http://localhost:8080/totolo/v1/orders';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Obtener todos los pedidos (para admin)\r\n  // getAllOrders(): Observable<Order[]> {\r\n  //   return this.http.get<Order[]>(`${this.baseUrl}/all`);\r\n  // }\r\ngetAllOrders(): Observable<Order[]> {\r\n  return this.http.get<Order[]>(`${this.baseUrl}/all`, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\n  // Obtener pedidos del usuario (puedes mantener si quieres)\r\n  getOrders(): Observable<Order[]> {\r\n    return this.http.get<Order[]>(this.baseUrl, {\r\n      withCredentials: true\r\n    });\r\n  }\r\n\r\n  updateOrderStatus(id: number, status: string): Observable<void> {\r\n    return this.http.put<void>(`${this.baseUrl}/${id}/status?status=${status}`, {}, {\r\n      withCredentials: true\r\n    });\r\n  }\r\n\r\n  // Crear un nuevo pedido\r\n  createOrder(address: string, items: CartItem[]): Observable<Order> {\r\n    const orderPayload = {\r\n      address: address,\r\n      items: items.map(item => ({\r\n        productId: item.productId,\r\n        quantity: item.quantity\r\n      }))\r\n    };\r\n    return this.http.post<Order>(this.baseUrl, orderPayload, {\r\n      withCredentials: true\r\n    });\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;AA6BM,IAAO,eAAP,MAAO,cAAY;EAGH;EAFZ,UAAU;EAElB,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAmB;;;;;EAMzC,eAAY;AACV,WAAO,KAAK,KAAK,IAAa,GAAG,KAAK,OAAO,QAAQ;MACnD,iBAAiB;KAClB;EACH;;EAGE,YAAS;AACP,WAAO,KAAK,KAAK,IAAa,KAAK,SAAS;MAC1C,iBAAiB;KAClB;EACH;EAEA,kBAAkB,IAAY,QAAc;AAC1C,WAAO,KAAK,KAAK,IAAU,GAAG,KAAK,OAAO,IAAI,EAAE,kBAAkB,MAAM,IAAI,CAAA,GAAI;MAC9E,iBAAiB;KAClB;EACH;;EAGA,YAAY,SAAiB,OAAiB;AAC5C,UAAM,eAAe;MACnB;MACA,OAAO,MAAM,IAAI,WAAS;QACxB,WAAW,KAAK;QAChB,UAAU,KAAK;QACf;;AAEJ,WAAO,KAAK,KAAK,KAAY,KAAK,SAAS,cAAc;MACvD,iBAAiB;KAClB;EACH;;qCAxCW,eAAY,mBAAA,UAAA,CAAA;EAAA;4EAAZ,eAAY,SAAZ,cAAY,WAAA,YAFX,OAAM,CAAA;;;sEAEP,cAAY,CAAA;UAHxB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
